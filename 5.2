using System;
using System.Globalization;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Shapes;

namespace ArchimedeanTree
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void DrawButton_Click(object sender, RoutedEventArgs e)
        {
            DrawCanvas.Children.Clear();

            if (!double.TryParse(AInput.Text, NumberStyles.Float, CultureInfo.InvariantCulture, out double A)) return;
            if (!double.TryParse(BInput.Text, NumberStyles.Float, CultureInfo.InvariantCulture, out double B)) return;
            if (!int.TryParse(KInput.Text, out int K)) return;
            if (!double.TryParse(AngleInput.Text, NumberStyles.Float, CultureInfo.InvariantCulture, out double angle)) return;
            if (!double.TryParse(ScaleInput.Text, NumberStyles.Float, CultureInfo.InvariantCulture, out double scale)) return;

            double startX = DrawCanvas.ActualWidth / 2;
            double startY = DrawCanvas.ActualHeight;

            DrawTree(DrawCanvas, K, startX, startY, B, -90, A, K, angle, scale);
        }

        private void DrawTree(Canvas canvas, int order, double x, double y, double length, double angle, double A, int K, double branchAngle, double scale)
        {
            if (order == 0)
                return;

            double rad = angle * Math.PI / 180;
            double x1 = x + length * Math.Cos(rad);
            double y1 = y + length * Math.Sin(rad);

            var line = new Line
            {
                X1 = x,
                Y1 = y,
                X2 = x1,
                Y2 = y1,
                Stroke = Brushes.Green,
                StrokeThickness = A * (order / (double)K)
            };

            canvas.Children.Add(line);

            DrawTree(canvas, order - 1, x1, y1, length * scale, angle - branchAngle, A, K, branchAngle, scale);
            DrawTree(canvas, order - 1, x1, y1, length * scale, angle + branchAngle, A, K, branchAngle, scale);
        }
    }
}
